import fi.tkk.cs.tkkcc.slx.*;
// import mycompiler.SymbolTable;
// import Scanner;
// import Printer;

COMPILER Compiler

public Parser(Scanner s, Printer p) {
    this(s);
    this.printer = p;
}

public SymbolTable st;
private Printer printer;

CHARACTERS
  cr  = '\r'.
  lf  = '\n'.
  tab = '\t'.

  zero          = '0'.
  nonZeroDigit  = "123456789".
  digit         = zero + nonZeroDigit .
  letter        = 'A' .. 'Z' + 'a' .. 'z' + '_' + '$'.

  char          = ANY - "'" - '\\' - cr - lf.
  stringChar    = ANY - "\"" - '\\' - cr - lf.

TOKENS
  identifier    = letter { letter | digit }.
  integer       = digit { digit }.

  colon   = ":".
  comma   = ",".
  dec     = "--".
  dot     = ".".
  inc     = "++".
  lbrace  = "{".
  lbrack  = "[".
  lpar    = "(".
  minus   = "-".
  not     = "!".
  plus    = "+".
  rbrace  = "}".
  rbrack  = "]".
  rpar    = ")".
  tilde   = "~".

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO lf

IGNORE cr + lf + tab

PRODUCTIONS

/*---------------------------------------------------------------------------*/

Compiler                               (. System.out.println("Start"); .)
= MainFuncDecl                         (. st.printTable(); .)
.

/*---------------------------------------------------------------------------*/

MainFuncDecl
= "main"                               (. st.openScope(); .)
  FuncBody                             (. st.closeScope(); .)
.

/*---------------------------------------------------------------------------*/

FuncBody
= "begin"
  VarDecl
  StatementList
  ReturnStatement
  "end"
.

/*---------------------------------------------------------------------------*/

VarDecl                                 (. String name; int type; int var_count = 0; .)
= {
  Type<out type>
  Ident<out name>                       (. st.addVariable(name, type); var_count++; .)
  ';'
  }
.

/*---------------------------------------------------------------------------*/

ReturnStatement
=                                        (. int type; .)
  "return" Expr<out type> ";"
.

/*---------------------------------------------------------------------------*/

StatementList
= { Statement }
.

/*---------------------------------------------------------------------------*/

Statement
=                                         (. int type; .)
  "if" "(" Expr<out type> ")" "then" Statement
|                                         (. int type; .)
  "do" Statement "while" "(" Expr<out type> ")" ";"
|                                         (. int type; .)
  "print" "(" Expr<out type> ")" ";"
| "begin" StatementList "end"
|                                         (. String name; int type; SymbolTable.Variable var; .)
  Ident<out name>                         (. var = (SymbolTable.Variable) st.findSymbol(name); .)
  "="
  Expr<out type>
  ";"    // Meaning: assignment
.

/*---------------------------------------------------------------------------*/

  Expr<out int type>                        (. int t1, t2; type = 0; .)
= RelExpr
{ "&&"
  RelExpr
}
.

/*---------------------------------------------------------------------------*/

RelExpr
= SimExpr { RelOp SimExpr }
.

/*---------------------------------------------------------------------------*/

SimExpr
= "!" SimExpr
| Term { AddOp Term }
.

/*---------------------------------------------------------------------------*/

Term
= Factor { MulOp Factor }
.

/*---------------------------------------------------------------------------*/

Factor
=
(                                                      (. int type; .)
  "(" Expr<out type> ")"
|                                                      (. String name; .)
Ident<out name>
| integer
| "true"
| "false"
| "read" "(" ")"
)
.

/*---------------------------------------------------------------------------*/

AddOp
= "+"
| "-"
.

/*---------------------------------------------------------------------------*/

MulOp
= "*"
| "/"
.

/*---------------------------------------------------------------------------*/

RelOp
= "<"
.

/*---------------------------------------------------------------------------*/

Ident<out String name>
= identifier                                        (. name = t.val; .)
.

/*---------------------------------------------------------------------------*/

Type<out int type>                                  (. type = st.UNDEFINED; .)
= "int"                                             (. type = st.INTEGER; .)
| "boolean"                                         (. type = st.BOOLEAN; .)
.

END Compiler.
