COMPILER Compiler

CHARACTERS
  cr  = '\r'.
  lf  = '\n'.
  tab = '\t'.

  zero          = '0'.
  nonZeroDigit  = "123456789".
  digit         = zero + nonZeroDigit .
  letter        = 'A' .. 'Z' + 'a' .. 'z' + '_' + '$'.

  char          = ANY - "'" - '\\' - cr - lf.
  stringChar    = ANY - "\"" - '\\' - cr - lf.

TOKENS
  identifier    = letter { letter | digit }.
  integer       = digit { digit }.

  colon   = ":".
  comma   = ",".
  dec     = "--".
  dot     = ".".
  inc     = "++".
  lbrace  = "{".
  lbrack  = "[".
  lpar    = "(".
  minus   = "-".
  not     = "!".
  plus    = "+".
  rbrace  = "}".
  rbrack  = "]".
  rpar    = ")".
  tilde   = "~".

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO lf

IGNORE cr + lf + tab

PRODUCTIONS

/*---------------------------------------------------------------------------*/

Compiler
= MainFuncDecl
.

/*---------------------------------------------------------------------------*/

MainFuncDecl
= "main" FuncBody
.

/*---------------------------------------------------------------------------*/

FuncBody
= "begin" VarDecl StatementList ReturnStatement "end"
.

/*---------------------------------------------------------------------------*/

VarDecl
= { Type identifier ";" }
.

/*---------------------------------------------------------------------------*/

ReturnStatement
= "return" Expr ";"
.

/*---------------------------------------------------------------------------*/

StatementList
= { Statement }
.

/*---------------------------------------------------------------------------*/

Statement
= "if" "(" Expr ")" "then" Statement
| "do" Statement "while" "(" Expr ")" ";"
| "print" "(" Expr ")" ";"
| "begin" StatementList "end"
| IdAccess "=" Expr ";"    // Meaning: assignment
.

/*---------------------------------------------------------------------------*/

Expr
= RelExpr { "&&" RelExpr }
.

/*---------------------------------------------------------------------------*/

RelExpr
= SimExpr { RelOp SimExpr }
.

/*---------------------------------------------------------------------------*/

SimExpr
= "!" SimExpr
| Term { AddOp Term }
.

/*---------------------------------------------------------------------------*/

Term
= Factor { MulOp Factor }
.

/*---------------------------------------------------------------------------*/

Factor
=
( "(" Expr ")"
| IdAccess
| integer
| "true"
| "false"
| "read" "(" ")"
)
.

/*---------------------------------------------------------------------------*/

AddOp
= "+"
| "-"
.

/*---------------------------------------------------------------------------*/

MulOp
= "*"
| "/"
.

/*---------------------------------------------------------------------------*/

RelOp
= "<"
.

/*---------------------------------------------------------------------------*/

IdAccess
= identifier
.

/*---------------------------------------------------------------------------*/

Type
= "int"
| "boolean"
.

END Compiler.
